- name: Get latest release version
  id: get_version
  run: |
    LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

    if [[ -z "$LATEST_TAG" ]]; then
      echo "No existing tags found. Starting from v0.0.0"
      LATEST_TAG="v0.0.0"
    fi

    echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

    MAJOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1/')
    MINOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\2/')
    PATCH=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\3/')

    PATCH=$((PATCH + 1))
    NEW_TAG="v$MAJOR.$MINOR.$PATCH"

    echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

- name: Generate Release Notes
  id: release_notes
  run: |
    if git rev-parse "$LATEST_TAG" >/dev/null 2>&1; then
      COMMITS=$(git log --pretty=format:"- %s (%h)" $LATEST_TAG..HEAD)
    else
      COMMITS=$(git log --pretty=format:"- %s (%h)")
    fi

    COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
    COMMIT_MESSAGE=$(git log -1 --pretty=format:'%s')

    echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
    echo "## Release ${{ env.NEW_TAG }}" >> $GITHUB_ENV
    echo "" >> $GITHUB_ENV
    echo "### ðŸ“¦ Changes" >> $GITHUB_ENV
    echo "$COMMITS" >> $GITHUB_ENV
    echo "" >> $GITHUB_ENV
    echo "### ðŸ”„ Latest Commit" >> $GITHUB_ENV
    echo "- **Author:** $COMMIT_AUTHOR" >> $GITHUB_ENV
    echo "- **Message:** $COMMIT_MESSAGE" >> $GITHUB_ENV
    echo "EOF" >> $GITHUB_ENV
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: Release ${{ env.NEW_TAG }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Output Results
        run: |
          echo "::notice::ðŸŽ‰ Created release ${{ env.NEW_TAG }} from latest commit"
